package com.computec.sitevisit.model.entity;

import java.math.BigDecimal;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCIteratorBinding;

import oracle.binding.BindingContainer;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 29 10:18:08 EET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractEOImpl extends EntityImpl {
    /**
     * Validation method for TcntPrd.
     */
    public boolean validateTcntPrd(Date tcntprd) {
        if (getFcntPrd() != null)
            return tcntprd.dateValue().compareTo(getFcntPrd().dateValue()) > 0;
        return true;
    }

    /**
     * Validation method for FcntPrd.
     */
    public boolean validateFcntPrd(Date fcntprd) {
        if (getTcntPrd() != null)
            return fcntprd.dateValue().compareTo(getTcntPrd().dateValue()) < 0;
        return true;
    }

    /**
     * Validation method for FcntPrd.
     */
    public boolean validateFromDateRange(Date fcntprd) {
        if (getTcntPrd() != null) {
            BindingContainer bindings = BindingContext.getCurrent().getCurrentBindingsEntry();
            DCIteratorBinding iter = (DCIteratorBinding) bindings.get("ContractVO1Iterator");
            RowSetIterator rowIter = iter.getRowSetIterator();
            Date tcntprd = getTcntPrd();
            DBSequence newID = getSitecntId();
            for(int i=0;i<rowIter.getRowCount();i++) {
                rowIter.setCurrentRowAtRangeIndex(i);
                DBSequence currentID = (DBSequence) rowIter.getCurrentRow().getAttribute("SitecntId");
                if (newID.equals(currentID))
                    continue;
                Date testToDate = (Date) rowIter.getCurrentRow().getAttribute("TcntPrd");
                Date testFrDate = (Date) rowIter.getCurrentRow().getAttribute("FcntPrd");
                if (isOverLaped(fcntprd, tcntprd, testFrDate, testToDate)) {
                    rowIter.first();
                    return false;
                }
            }
            rowIter.first();
            return true;
        }
        return true;
    }

    boolean isOverLaped(Date start1, Date end1, Date start2, Date end2) throws NullPointerException {
        if (((start1.dateValue().compareTo(start2.dateValue()) <= 0) &&
             (end1.dateValue().compareTo(start2.dateValue()) >= 0)) ||
            ((start1.dateValue().compareTo(end2.dateValue()) <= 0) &&
             (end1.dateValue().compareTo(end2.dateValue()) >= 0)) ||
            ((start1.dateValue().compareTo(start2.dateValue()) <= 0) &&
             (end1.dateValue().compareTo(end2.dateValue()) >= 0))) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Soccode,
        Bracode,
        Clino,
        ChrgTyp,
        FcntPrd,
        TcntPrd,
        NbrHrs,
        SitecntId,
        Client;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SOCCODE = AttributesEnum.Soccode.index();
    public static final int BRACODE = AttributesEnum.Bracode.index();
    public static final int CLINO = AttributesEnum.Clino.index();
    public static final int CHRGTYP = AttributesEnum.ChrgTyp.index();
    public static final int FCNTPRD = AttributesEnum.FcntPrd.index();
    public static final int TCNTPRD = AttributesEnum.TcntPrd.index();
    public static final int NBRHRS = AttributesEnum.NbrHrs.index();
    public static final int SITECNTID = AttributesEnum.SitecntId.index();
    public static final int CLIENT = AttributesEnum.Client.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ContractEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.computec.sitevisit.model.entity.ContractEO");
    }


    /**
     * Gets the attribute value for Soccode, using the alias name Soccode.
     * @return the value of Soccode
     */
    public String getSoccode() {
        return (String) getAttributeInternal(SOCCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Soccode.
     * @param value value to set the Soccode
     */
    public void setSoccode(String value) {
        setAttributeInternal(SOCCODE, value);
    }

    /**
     * Gets the attribute value for Bracode, using the alias name Bracode.
     * @return the value of Bracode
     */
    public String getBracode() {
        return (String) getAttributeInternal(BRACODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Bracode.
     * @param value value to set the Bracode
     */
    public void setBracode(String value) {
        setAttributeInternal(BRACODE, value);
    }

    /**
     * Gets the attribute value for Clino, using the alias name Clino.
     * @return the value of Clino
     */
    public String getClino() {
        return (String) getAttributeInternal(CLINO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Clino.
     * @param value value to set the Clino
     */
    public void setClino(String value) {
        setAttributeInternal(CLINO, value);
    }

    /**
     * Gets the attribute value for ChrgTyp, using the alias name ChrgTyp.
     * @return the value of ChrgTyp
     */
    public String getChrgTyp() {
        return (String) getAttributeInternal(CHRGTYP);
    }

    /**
     * Sets <code>value</code> as the attribute value for ChrgTyp.
     * @param value value to set the ChrgTyp
     */
    public void setChrgTyp(String value) {
        setAttributeInternal(CHRGTYP, value);
    }

    /**
     * Gets the attribute value for FcntPrd, using the alias name FcntPrd.
     * @return the value of FcntPrd
     */
    public Date getFcntPrd() {
        return (Date) getAttributeInternal(FCNTPRD);
    }

    /**
     * Sets <code>value</code> as the attribute value for FcntPrd.
     * @param value value to set the FcntPrd
     */
    public void setFcntPrd(Date value) {
        setAttributeInternal(FCNTPRD, value);
    }

    /**
     * Gets the attribute value for TcntPrd, using the alias name TcntPrd.
     * @return the value of TcntPrd
     */
    public Date getTcntPrd() {
        return (Date) getAttributeInternal(TCNTPRD);
    }

    /**
     * Sets <code>value</code> as the attribute value for TcntPrd.
     * @param value value to set the TcntPrd
     */
    public void setTcntPrd(Date value) {
        setAttributeInternal(TCNTPRD, value);
    }

    /**
     * Gets the attribute value for NbrHrs, using the alias name NbrHrs.
     * @return the value of NbrHrs
     */
    public BigDecimal getNbrHrs() {
        return (BigDecimal) getAttributeInternal(NBRHRS);
    }

    /**
     * Sets <code>value</code> as the attribute value for NbrHrs.
     * @param value value to set the NbrHrs
     */
    public void setNbrHrs(BigDecimal value) {
        setAttributeInternal(NBRHRS, value);
    }

    /**
     * Gets the attribute value for SitecntId, using the alias name SitecntId.
     * @return the value of SitecntId
     */
    public DBSequence getSitecntId() {
        return (DBSequence) getAttributeInternal(SITECNTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SitecntId.
     * @param value value to set the SitecntId
     */
    public void setSitecntId(DBSequence value) {
        setAttributeInternal(SITECNTID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getClient() {
        return (RowIterator) getAttributeInternal(CLIENT);
    }

    /**
     * @param sitecntId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence sitecntId) {
        return new Key(new Object[] { sitecntId });
    }


}

